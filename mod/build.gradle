plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.34-beta'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    maven {
        name = "NeoForge"
        url = "https://maven.neoforged.net/releases/"
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "Sinytra"
        url = "https://maven.su5ed.dev/releases"
    }
}

configurations {
    builtModJar {
        canBeConsumed = true
        canBeResolved = false
    }
}

base {
    archivesName = mod_id + "-mod-file"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

def at = file('src/main/resources/META-INF/accesstransformer.cfg')
if (at.exists()) {
    minecraft.accessTransformers.file at
}

neoForge {
    version = project.neo_version

    // Default run configurations.
    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.ERROR
        }
    }

    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}


dependencies {
    implementation(project(":"))
    implementation "maven.modrinth:connector:2.0.0-beta.3+1.21.1"
    implementation "org.sinytra.forgified-fabric-api:forgified-fabric-api:0.104.0+2.0.14+1.21.1"
    // Add the base CIT Resewn API to the project
//    implementation "maven.modrinth:cit-resewn:1.2.1+1.21"
    // Add Defaults to the project
//    implementation "maven.modrinth:cit-resewn-defaults:1.2.1+1.21"

    // citresewn jars remapped for neoforge by connector
    compileOnly files("../libs/citresewn-1.2.2+1.21_mapped_moj_1.21.1.jar")
    compileOnly files("../libs/citresewn-1.2.2+1.21\$citresewn-defaults-1.2.2+1.21_mapped_moj_1.21.1.jar")
}

jar {
    manifest {
        attributes["Automatic-Module-Name"] = "citrnp_mod"
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version       : minecraft_version,
            minecraft_version_range : minecraft_version_range,
            neo_version             : neo_version,
            neo_version_range       : neo_version_range,
            loader_version_range    : loader_version_range,
            mod_id                  : mod_id,
            mod_name                : mod_name,
            mod_version             : mod_version,
            mod_authors             : mod_authors,
            mod_description         : mod_description,
            mod_homepage_modrinth   : mod_homepage_modrinth,
            mod_homepage_curseforge : mod_homepage_curseforge,
            mod_donate_paypal       : mod_donate_paypal,
            mod_sources             : mod_sources,
            mod_issue_tracker       : mod_issue_tracker,
            mod_license             : mod_license,
            mod_license_link        : mod_license_link,
            mod_license_version     : mod_license_version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

artifacts {
    builtModJar(tasks.jar.archiveFile) {
        builtBy(jar)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}